{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A modern RESTful API for managing your todos efficiently. This API provides comprehensive endpoints for creating, reading, updating, and deleting todo items.",
        "title": "Todo List API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support Team",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/v1/logs": {
            "get": {
                "description": "Retrieves logs based on specified time range, search query, levels, and applications. Supports pagination and sorting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Search and filter logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time in ISO 8601 format (e.g., 2023-04-29T09:00:00Z) or epoch milliseconds",
                        "name": "startTime",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time in ISO 8601 format (e.g., 2023-04-29T10:00:00Z) or epoch milliseconds",
                        "name": "endTime",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Free text search query",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of log levels (e.g., ERROR,WARN)",
                        "name": "levels",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of application IDs (e.g., application_123,app_456)",
                        "name": "applications",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "@timestamp",
                            "level",
                            "component",
                            "application"
                        ],
                        "type": "string",
                        "description": "Field to sort by (default: @timestamp)",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order (asc or desc, default: desc)",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of logs per page (default: 50, max: 1000)",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved logs",
                        "schema": {
                            "$ref": "#/definitions/dto.LogSearchResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/logs/applications": {
            "get": {
                "description": "Retrieves a list of unique application IDs found within a time range.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get distinct application IDs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time (ISO 8601 or epoch ms)",
                        "name": "startTime",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (ISO 8601 or epoch ms)",
                        "name": "endTime",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved application list",
                        "schema": {
                            "$ref": "#/definitions/dto.ApplicationListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/distribution": {
            "get": {
                "description": "Retrieves the distribution of a metric (e.g., log_event count) grouped by a specified dimension (e.g., level, component) within a time range. Suitable for pie charts or bar charts showing proportions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metric distribution",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time (ISO 8601 or epoch ms)",
                        "name": "startTime",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (ISO 8601 or epoch ms)",
                        "name": "endTime",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of application IDs",
                        "name": "applications",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "log_event",
                            "error_event"
                        ],
                        "type": "string",
                        "description": "Metric name (e.g., log_event, error_event)",
                        "name": "metricName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "level",
                            "component",
                            "error_key",
                            "application"
                        ],
                        "type": "string",
                        "description": "Dimension to group by for distribution (e.g., level, component, error_key)",
                        "name": "dimension",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved metric distribution",
                        "schema": {
                            "$ref": "#/definitions/dto.MetricDistributionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/summary": {
            "get": {
                "description": "Retrieves total log and error counts within a time range, optionally filtered by applications.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get summary metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time (ISO 8601 or epoch ms)",
                        "name": "startTime",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (ISO 8601 or epoch ms)",
                        "name": "endTime",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of application IDs",
                        "name": "applications",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved summary metrics",
                        "schema": {
                            "$ref": "#/definitions/dto.MetricSummaryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/timeseries": {
            "get": {
                "description": "Retrieves timeseries data for a specific metric, aggregated over an interval and optionally grouped by a tag.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get timeseries metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time (ISO 8601 or epoch ms)",
                        "name": "startTime",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (ISO 8601 or epoch ms)",
                        "name": "endTime",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of application IDs",
                        "name": "applications",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "log_event",
                            "error_event"
                        ],
                        "type": "string",
                        "description": "Metric name (e.g., log_event, error_event)",
                        "name": "metricName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "1 minute",
                            "5 minute",
                            "10 minute",
                            "30 minute",
                            "1 hour",
                            "1 day"
                        ],
                        "type": "string",
                        "description": "Time interval for bucketing (e.g., '5 minute', '1 hour')",
                        "name": "interval",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "level",
                            "component",
                            "error_key",
                            "application",
                            "total"
                        ],
                        "type": "string",
                        "description": "Tag key to group by (e.g., level, component, error_key, application, total)",
                        "name": "groupBy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved timeseries metrics",
                        "schema": {
                            "$ref": "#/definitions/dto.MetricTimeseriesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/nlv/query": {
            "post": {
                "description": "Takes a natural language query and an optional conversation ID. Analyzes the query in the context of the conversation (using LLM), queries the appropriate data source (TimescaleDB for metrics, Elasticsearch for logs), and returns structured data suitable for frontend visualization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nlv"
                ],
                "summary": "Process Natural Language Query for Visualization",
                "parameters": [
                    {
                        "description": "User query and optional conversation ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NLVQueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query processed. Contains data and visualization info, or an error message.",
                        "schema": {
                            "$ref": "#/definitions/dto.NLVQueryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error during processing (e.g., LLM unavailable, DB error)",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/todos": {
            "get": {
                "description": "get all todos",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Get all todos",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Todo"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create new todo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Create a todo",
                "parameters": [
                    {
                        "description": "Create todo",
                        "name": "todo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TodoCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Todo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/todos/{id}": {
            "get": {
                "description": "get todo by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Get a todo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Todo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Todo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "update todo by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Update a todo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Todo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update todo",
                        "name": "todo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TodoCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Todo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete todo by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Delete a todo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Todo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "get the status of server.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Show the status of server.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ApplicationListResponse": {
            "type": "object",
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.DistributionDataPoint": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Tên của phần (ví dụ: \"INFO\", \"ERROR\", \"YarnAllocator\")",
                    "type": "string"
                },
                "value": {
                    "description": "Giá trị đếm",
                    "type": "integer"
                }
            }
        },
        "dto.LLMAnalysisResult": {
            "type": "object",
            "properties": {
                "aggregation": {
                    "description": "\"COUNT\", \"AVG\", \"SUM\", \"NONE\"",
                    "type": "string"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.QueryFilter"
                    }
                },
                "group_by": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "intent": {
                    "description": "\"query_metric\", \"query_log\", \"unknown\"",
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "metric_name": {
                    "description": "\"error_event\" | \"log_event\" | null",
                    "type": "string"
                },
                "sort": {
                    "$ref": "#/definitions/dto.SortInfo"
                },
                "time_range": {
                    "$ref": "#/definitions/dto.TimeRange"
                },
                "visualization_hint": {
                    "type": "string"
                }
            }
        },
        "dto.LogSearchResponse": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.LogEntry"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "dto.MetricDistributionResponse": {
            "type": "object",
            "properties": {
                "dimension": {
                    "type": "string"
                },
                "distribution": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DistributionDataPoint"
                    }
                },
                "metricName": {
                    "type": "string"
                }
            }
        },
        "dto.MetricSummaryResponse": {
            "type": "object",
            "properties": {
                "totalErrorEvents": {
                    "type": "integer"
                },
                "totalLogEvents": {
                    "type": "integer"
                }
            }
        },
        "dto.MetricTimeseriesResponse": {
            "type": "object",
            "properties": {
                "series": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TimeseriesSeries"
                    }
                }
            }
        },
        "dto.NLVQueryRequest": {
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "conversationId": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                }
            }
        },
        "dto.NLVQueryResponse": {
            "type": "object",
            "properties": {
                "columns": {
                    "description": "Tên các cột dữ liệu trả về",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conversationId": {
                    "type": "string"
                },
                "data": {
                    "description": "[[val1, val2,...], [val1, val2,...]]",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {}
                    }
                },
                "errorMessage": {
                    "type": "string"
                },
                "interpretedQuery": {
                    "description": "(optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.LLMAnalysisResult"
                        }
                    ]
                },
                "originalQuery": {
                    "type": "string"
                },
                "resultType": {
                    "description": "\"timeseries\", \"table\", \"scalar\", \"log_list\", \"error\"",
                    "type": "string"
                }
            }
        },
        "dto.QueryFilter": {
            "type": "object",
            "properties": {
                "field": {
                    "description": "\"level\", \"component\", \"tags.error_key\", \"application\"",
                    "type": "string"
                },
                "operator": {
                    "description": "\"=\", \"!=\", \"IN\", \"NOT IN\", \"CONTAINS\" (cho text)",
                    "type": "string"
                },
                "value": {
                    "description": "string, []string, number"
                }
            }
        },
        "dto.SortInfo": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "order": {
                    "type": "string"
                }
            }
        },
        "dto.TimeRange": {
            "type": "object",
            "properties": {
                "end": {
                    "description": "\"now\", \"ISO8601\", epoch ms",
                    "type": "string"
                },
                "start": {
                    "description": "\"now-1h\", \"ISO8601\", epoch ms",
                    "type": "string"
                }
            }
        },
        "dto.TimeseriesDataPoint": {
            "type": "object",
            "properties": {
                "timestamp": {
                    "description": "Epoch Milliseconds",
                    "type": "integer"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "dto.TimeseriesSeries": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TimeseriesDataPoint"
                    }
                },
                "name": {
                    "description": "Tên của series (ví dụ: \"INFO\", \"WARN\", \"YarnAllocator\")",
                    "type": "string"
                }
            }
        },
        "dto.TodoCreate": {
            "description": "Todo creation request body",
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "description": {
                    "description": "Detailed description of the todo item",
                    "type": "string",
                    "example": "Write comprehensive documentation for the API endpoints"
                },
                "status": {
                    "description": "Current status of the todo item (pending, in-progress, completed)",
                    "type": "string",
                    "enum": [
                        "pending",
                        "in-progress",
                        "completed"
                    ],
                    "example": "pending"
                },
                "title": {
                    "description": "Title of the todo item",
                    "type": "string",
                    "example": "Complete project documentation"
                }
            }
        },
        "model.LogEntry": {
            "type": "object",
            "properties": {
                "@timestamp": {
                    "type": "string"
                },
                "application": {
                    "type": "string"
                },
                "component": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "raw_log": {
                    "type": "string"
                },
                "source_file": {
                    "type": "string"
                }
            }
        },
        "model.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Todo": {
            "description": "Todo represents a single todo item with its details",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the todo was created",
                    "type": "string",
                    "example": "2024-03-15T08:00:00Z"
                },
                "description": {
                    "description": "Detailed description of the todo item",
                    "type": "string",
                    "example": "Write comprehensive documentation for the API endpoints"
                },
                "id": {
                    "description": "Unique identifier of the todo",
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "description": "Current status of the todo item (pending, in-progress, completed)",
                    "type": "string",
                    "enum": [
                        "pending",
                        "in-progress",
                        "completed"
                    ],
                    "example": "pending"
                },
                "title": {
                    "description": "Title of the todo item",
                    "type": "string",
                    "example": "Complete project documentation"
                },
                "updated_at": {
                    "description": "Timestamp when the todo was last updated",
                    "type": "string",
                    "example": "2024-03-15T08:00:00Z"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Enter the token with the `Bearer: ` prefix, e.g. \"Bearer abcde12345\".",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Operations about todos",
            "name": "todos",
            "externalDocs": {
                "description": "Detailed information about todo operations",
                "url": "http://example.com/docs/todos"
            }
        },
        {
            "description": "API health check operations",
            "name": "health"
        }
    ]
}