basePath: /
definitions:
  dto.ApplicationListResponse:
    properties:
      applications:
        items:
          type: string
        type: array
    type: object
  dto.LLMAnalysisResult:
    properties:
      aggregation:
        description: '"COUNT", "AVG", "SUM", "NONE"'
        type: string
      filters:
        items:
          $ref: '#/definitions/dto.QueryFilter'
        type: array
      group_by:
        items:
          type: string
        type: array
      intent:
        description: '"query_metric", "query_log", "unknown"'
        type: string
      metric_name:
        description: '"error_event" | "log_event" | null'
        type: string
      time_range:
        $ref: '#/definitions/dto.TimeRange'
      visualization_hint:
        type: string
    type: object
  dto.LogSearchResponse:
    properties:
      logs:
        items:
          $ref: '#/definitions/model.LogEntry'
        type: array
      page:
        type: integer
      size:
        type: integer
      totalCount:
        type: integer
    type: object
  dto.MetricSummaryResponse:
    properties:
      totalErrorEvents:
        type: integer
      totalLogEvents:
        type: integer
    type: object
  dto.MetricTimeseriesResponse:
    properties:
      series:
        items:
          $ref: '#/definitions/dto.TimeseriesSeries'
        type: array
    type: object
  dto.NLVQueryRequest:
    properties:
      query:
        type: string
    required:
    - query
    type: object
  dto.NLVQueryResponse:
    properties:
      columns:
        description: Tên các cột dữ liệu trả về
        items:
          type: string
        type: array
      data:
        description: '[[val1, val2,...], [val1, val2,...]]'
        items:
          items: {}
          type: array
        type: array
      errorMessage:
        type: string
      interpretedQuery:
        allOf:
        - $ref: '#/definitions/dto.LLMAnalysisResult'
        description: (optional)
      originalQuery:
        type: string
      resultType:
        description: '"timeseries", "table", "scalar", "log_list", "error"'
        type: string
    type: object
  dto.QueryFilter:
    properties:
      field:
        description: '"level", "component", "tags.error_key", "application"'
        type: string
      operator:
        description: '"=", "!=", "IN", "NOT IN", "CONTAINS" (cho text)'
        type: string
      value:
        description: string, []string, number
    type: object
  dto.TimeRange:
    properties:
      end:
        description: '"now", "ISO8601", epoch ms'
        type: string
      start:
        description: '"now-1h", "ISO8601", epoch ms'
        type: string
    type: object
  dto.TimeseriesDataPoint:
    properties:
      timestamp:
        description: Epoch Milliseconds
        type: integer
      value:
        type: integer
    type: object
  dto.TimeseriesSeries:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.TimeseriesDataPoint'
        type: array
      name:
        description: 'Tên của series (ví dụ: "INFO", "WARN", "YarnAllocator")'
        type: string
    type: object
  dto.TodoCreate:
    description: Todo creation request body
    properties:
      description:
        description: Detailed description of the todo item
        example: Write comprehensive documentation for the API endpoints
        type: string
      status:
        description: Current status of the todo item (pending, in-progress, completed)
        enum:
        - pending
        - in-progress
        - completed
        example: pending
        type: string
      title:
        description: Title of the todo item
        example: Complete project documentation
        type: string
    required:
    - title
    type: object
  model.LogEntry:
    properties:
      '@timestamp':
        type: string
      application:
        type: string
      component:
        type: string
      content:
        type: string
      level:
        type: string
      raw_log:
        type: string
      source_file:
        type: string
    type: object
  model.Response:
    properties:
      data: {}
      message:
        type: string
    type: object
  model.Todo:
    description: Todo represents a single todo item with its details
    properties:
      created_at:
        description: Timestamp when the todo was created
        example: "2024-03-15T08:00:00Z"
        type: string
      description:
        description: Detailed description of the todo item
        example: Write comprehensive documentation for the API endpoints
        type: string
      id:
        description: Unique identifier of the todo
        example: 1
        type: integer
      status:
        description: Current status of the todo item (pending, in-progress, completed)
        enum:
        - pending
        - in-progress
        - completed
        example: pending
        type: string
      title:
        description: Title of the todo item
        example: Complete project documentation
        type: string
      updated_at:
        description: Timestamp when the todo was last updated
        example: "2024-03-15T08:00:00Z"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support Team
    url: http://www.example.com/support
  description: A modern RESTful API for managing your todos efficiently. This API
    provides comprehensive endpoints for creating, reading, updating, and deleting
    todo items.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Todo List API
  version: "1.0"
paths:
  /api/v1/logs:
    get:
      consumes:
      - application/json
      description: Retrieves logs based on specified time range, search query, levels,
        and applications. Supports pagination and sorting.
      parameters:
      - description: Start time in ISO 8601 format (e.g., 2023-04-29T09:00:00Z) or
          epoch milliseconds
        in: query
        name: startTime
        required: true
        type: string
      - description: End time in ISO 8601 format (e.g., 2023-04-29T10:00:00Z) or epoch
          milliseconds
        in: query
        name: endTime
        required: true
        type: string
      - description: Free text search query
        in: query
        name: query
        type: string
      - description: Comma-separated list of log levels (e.g., ERROR,WARN)
        in: query
        name: levels
        type: string
      - description: Comma-separated list of application IDs (e.g., application_123,app_456)
        in: query
        name: applications
        type: string
      - description: 'Field to sort by (default: @timestamp)'
        enum:
        - '@timestamp'
        - level
        - component
        - application
        in: query
        name: sortBy
        type: string
      - description: 'Sort order (asc or desc, default: desc)'
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      - description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Number of logs per page (default: 50, max: 1000)'
        in: query
        maximum: 1000
        minimum: 1
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved logs
          schema:
            $ref: '#/definitions/dto.LogSearchResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Search and filter logs
      tags:
      - logs
  /api/v1/logs/applications:
    get:
      consumes:
      - application/json
      description: Retrieves a list of unique application IDs found within a time
        range.
      parameters:
      - description: Start time (ISO 8601 or epoch ms)
        in: query
        name: startTime
        required: true
        type: string
      - description: End time (ISO 8601 or epoch ms)
        in: query
        name: endTime
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved application list
          schema:
            $ref: '#/definitions/dto.ApplicationListResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get distinct application IDs
      tags:
      - logs
  /api/v1/metrics/summary:
    get:
      consumes:
      - application/json
      description: Retrieves total log and error counts within a time range, optionally
        filtered by applications.
      parameters:
      - description: Start time (ISO 8601 or epoch ms)
        in: query
        name: startTime
        required: true
        type: string
      - description: End time (ISO 8601 or epoch ms)
        in: query
        name: endTime
        required: true
        type: string
      - description: Comma-separated list of application IDs
        in: query
        name: applications
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved summary metrics
          schema:
            $ref: '#/definitions/dto.MetricSummaryResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get summary metrics
      tags:
      - metrics
  /api/v1/metrics/timeseries:
    get:
      consumes:
      - application/json
      description: Retrieves timeseries data for a specific metric, aggregated over
        an interval and optionally grouped by a tag.
      parameters:
      - description: Start time (ISO 8601 or epoch ms)
        in: query
        name: startTime
        required: true
        type: string
      - description: End time (ISO 8601 or epoch ms)
        in: query
        name: endTime
        required: true
        type: string
      - description: Comma-separated list of application IDs
        in: query
        name: applications
        type: string
      - description: Metric name (e.g., log_event, error_event)
        enum:
        - log_event
        - error_event
        in: query
        name: metricName
        required: true
        type: string
      - description: Time interval for bucketing (e.g., '5 minute', '1 hour')
        enum:
        - 1 minute
        - 5 minute
        - 10 minute
        - 30 minute
        - 1 hour
        - 1 day
        in: query
        name: interval
        required: true
        type: string
      - description: Tag key to group by (e.g., level, component, error_key, application,
          total)
        enum:
        - level
        - component
        - error_key
        - application
        - total
        in: query
        name: groupBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved timeseries metrics
          schema:
            $ref: '#/definitions/dto.MetricTimeseriesResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get timeseries metrics
      tags:
      - metrics
  /api/v1/nlv/query:
    post:
      consumes:
      - application/json
      description: Takes a natural language query, analyzes it (using LLM simulation),
        queries data, and returns formatted data for frontend visualization.
      parameters:
      - description: User's natural language query
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.NLVQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Query processed successfully (may contain data or error message)
          schema:
            $ref: '#/definitions/dto.NLVQueryResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal server error during processing
          schema:
            $ref: '#/definitions/model.Response'
      summary: Process Natural Language Query for Visualization
      tags:
      - nlv
  /api/v1/todos:
    get:
      consumes:
      - application/json
      description: get all todos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Todo'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: create new todo
      parameters:
      - description: Create todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/dto.TodoCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create a todo
      tags:
      - todos
  /api/v1/todos/{id}:
    delete:
      consumes:
      - application/json
      description: delete todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete a todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: get todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get a todo
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: update todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/dto.TodoCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Update a todo
      tags:
      - todos
  /health:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Show the status of server.
      tags:
      - health
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: 'Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Operations about todos
  externalDocs:
    description: Detailed information about todo operations
    url: http://example.com/docs/todos
  name: todos
- description: API health check operations
  name: health
