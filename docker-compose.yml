version: '3.8'

services:
  zookeeper:
      image: confluentinc/cp-zookeeper:7.3.3 
      container_name: zookeeper
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      ports:
        - "2181:2181"
      networks:
        - app-network
  kafka:
    image: confluentinc/cp-kafka:7.3.3 
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" 
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network
    healthcheck:
        test: ["CMD-SHELL", "/usr/bin/kafka-topics --bootstrap-server kafka:29092 --list"]
        interval: 10s
        timeout: 5s
        retries: 5
  elasticsearch:
    image: elasticsearch:8.14.0 
    container_name: elasticsearch
    environment:
      - discovery.type=single-node 
      - xpack.security.enabled=false # Disable security for dev (NOT FOR PRODUCTION)
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # Limit memory usage
    ports:
      - "9200:9200"
      - "9300:9300" # Transport port
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - app-network
    healthcheck:
        test: ["CMD-SHELL", "curl -s -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=10s"]
        interval: 15s
        timeout: 15s
        retries: 10
        start_period: 30s
  app:
    build: .
    container_name: log_app
    ports:
      - "8080:8080"
    env_file:
    - .env
    environment:
      - SERVER_PORT=8080
      - DATABASE_HOST=mysql
      - DATABASE_PORT=3306
      - DATABASE_USER=root
      - DATABASE_PASSWORD=password
      - DATABASE_NAME=todo_db
      - KAFKA_BROKERS=kafka:29092
      - ELASTICSEARCH_ADDRESSES=http://elasticsearch:9200
      - TIMESCALEDB_DSN=postgres://${TIMESCALEDB_USER:-user}:${TIMESCALEDB_PASSWORD:-password}@timescaledb:5432/${TIMESCALEDB_DB_NAME:-logdb}?sslmode=disable
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    volumes:
      - ./SparkLogs:/app/host_logs:ro
      - ./state:/app/state
    networks:
      - app-network
  timescaledb:
    image: timescale/timescaledb:latest-pg16 
    container_name: timescaledb
    environment:
      - POSTGRES_USER=${TIMESCALEDB_USER:-user}
      - POSTGRES_PASSWORD=${TIMESCALEDB_PASSWORD:-password}
      - POSTGRES_DB=${TIMESCALEDB_DB_NAME:-logdb}
    ports:
      - "5432:5432" 
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-user} -d $${POSTGRES_DB:-logdb}"] # $${VAR} để escape $
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s

  mysql:
    image: mysql:latest
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=todo_db
      - MYSQL_PASSWORD=mypassword
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - app-network

volumes:
  mysql_data: 
  kafka_data:
  es_data:
  timescale_data: {}
networks:
  app-network:
    driver: bridge
